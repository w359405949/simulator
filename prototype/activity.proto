package msg.activity;
import "activitytype.proto";

//
// 命令字定义
//
enum eMessageActivity
{
eMessageActivity_GetOnlinereward_C             = 0x1701;    // 领取在线奖励
eMessageActivity_GetOnlinereward_S             = 0x1702;    // 领取在线奖励(服务器返回)
eMessageActivity_GetOnlineRewardInfo_C         = 0x1703;    // 获取在线信息
eMessageActivity_GetOnlineRewardInfo_S         = 0x1704;    // 获取在线信息(服务器返回)
eMessageActivity_GetOnlineDayInfo_C            = 0x1705;    // 获取在线登录天数
eMessageActivity_GetOnlineDayInfo_S            = 0x1706;    // 获取在线登录天数(服务器返回)
eMessageActivity_GetOnlineDayReward_C          = 0x1707;    // 领取在线登录
eMessageActivity_GetOnlineDayReward_S          = 0x1708;    // 领取在线登录奖励(服务器返回)
eMessageActivity_GetOnlineLevelUpRewardInfo_C  = 0x1709;    // 获取等级奖励信息
eMessageActivity_GetOnlineLevelUpRewardInfo_S  = 0x170A;    // 获取等级奖励信息(服务器返回)
eMessageActivity_GetOnlineLevelUpReward_C      = 0x170B;    // 领取等级奖励
eMessageActivity_GetOnlineLevelUpReward_S      = 0x170c;    // 领取等级奖励(服务器返回)
eMessageActivity_GetActivityInfo_C             = 0x170D;    // 获取玩家所有活动能够信息
eMessageActivity_GetActivityInfo_S             = 0x170E;    // 获取活动能够信息(服务器返回)

eMessageActivity_GetDuelPkInfo_C               = 0x170F;    // 获取狂人pk榜
eMessageActivity_GetDuelPkInfo_S               = 0x1710;    // 获取狂人pk榜(服务器返回)
eMessageActivity_GetYestDuelPkRank_C           = 0x1711;    // 获取玩家昨日排行
eMessageActivity_GetYestDuelPkRank_S           = 0x1712;    // 获取玩家昨日排行(服务器返回)
eMessageActivity_GetDuelPkReward_C             = 0x1713;    // 领取昨日狂人榜奖励
eMessageActivity_GetDuelPkReward_S             = 0x1714;    // 领取昨日狂人榜奖励(服务器返回)
eMessageActivity_DuelPKResult_S                = 0x1715;    // pk通知

eMessageActivity_Get72HoleCopyList_C           = 0x1716;    // 获取72洞关卡列表
eMessageActivity_Get72HoleCopyList_S           = 0x1717;    // 获取72洞关卡列表(服务器返回)
eMessageActivity_Get72HoleReward_C             = 0x1718;    // 获取制霸奖励
eMessageActivity_Get72HoleReward_S             = 0x1719;    // 获取制霸奖励(服务器返回)
eMessageActivity_Buy72HoleFightCount_C         = 0x171A;    // 购买挑战次数
eMessageActivity_Buy72HoleFightCount_S         = 0x171B;    // 购买挑战次数(服务器返回)

eMessageActivity_GetDragonKillInfo_C           = 0x171C;    // 获取四海龙王信息
eMessageActivity_GetDragonKillInfo_S           = 0x171D;    // 获取四海龙王信息(服务器返回)
eMessageActivity_JoinDragonKill_C              = 0x171E;    // 报名参加四海龙王信息
eMessageActivity_JoinDragonKill_S              = 0x171F;    // 报名参加四海龙王信息(服务器返回)
eMessageActivity_DragonKillReward_S            = 0x1721;    // 四海龙王奖励(服务器返回)

eMessageActivity_GetTestDailyReward_C          = 0x1722;    // 领取测试服每日奖励
eMessageActivity_GetTestDailyReward_S          = 0x1723;    // 领取测试服每日奖励（服务器返回）

eMessageActivity_DragonKillCopyDamage_S        = 0x1724;    // 四海龙王伤害通知

eMessageActivity_GetVipEveryDayReward_C         = 0x1725;    // 领取vip每日奖励
eMessageActivity_GetVipEveryDayReward_S         = 0x1726;    // 领取vip每日奖励(返回)

eMessageActivity_DragonKillReviveCD_S           = 0x1727;    // 四海龙王复活cd时间
eMessageActivity_DragonkillRevive_C             = 0x1728;    // 四海龙王复活

eMessageActivity_EnterMonsterGoScene_S          = 0x1729;    // 进入怪物攻城场景通知
eMessageActivity_ClearMonsterGoDeBuf_C          = 0x1720;    // 怪物攻城花钱消灾
eMessageActivity_ClearMonsterGoDeBuf_S          = 0x172A;    // 怪物攻城花钱消灾返回
eMessageActivity_MonsterGoRevive_S              = 0x172B;   // 复活
eMessageActivity_MonsterGoCopyFightResult_S     = 0x172C;   // 通知前端战斗结果

eMessageActivity_GetIsland36CopyList_C           = 0x172D;    // 获取36岛关卡列表
eMessageActivity_GetIsland36CopyList_S           = 0x172E;    // 获取36岛关卡列表(服务器返回)
eMessageActivity_GetIsland36Reward_C             = 0x172F;    // 获取制霸奖励
eMessageActivity_GetIsland36Reward_S             = 0x1730;    // 获取制霸奖励(服务器返回)
eMessageActivity_BuyIsland36FightCount_C         = 0x1731;    // 购买挑战次数
eMessageActivity_BuyIsland36FightCount_S         = 0x1732;    // 购买挑战次数(服务器返回)

eMessageActivity_GetFirstPayReward_C             = 0x1733;    // 领取首充奖励
eMessageActivity_GetFirstPayReward_S             = 0x1734;    // 领取奖励(服务器返回)
eMessageActivity_GetTotalPayReward_C             = 0x1735;    // 领取累积充值奖励
eMessageActivity_GetTotalPayReward_S             = 0x1736;    // 领取累积充值奖励(服务器返回)
eMessageActivity_GetTotalConsumeReward_C         = 0x1737;    // 领取累积消费奖励
eMessageActivity_GetTotalConsumeReward_S         = 0x1738;    // 领取累积消费奖励(服务器返回)
eMessageActivity_ActivityInfo_S                  = 0x1739;    // 消息隔天通知

eMessageActivity_GetPKSquare_C                   = 0x173A;    // 打开斗仙
eMessageActivity_GetPKSquare_S                   = 0x173B;    // 打开斗仙坛
eMessageActivity_BuyPKSquareFightTimes_C         = 0x173C;    // 购买斗仙坛荣誉挑战次数
eMessageActivity_BuyPKSquareFightTimes_S         = 0x173D;    // 购买斗仙坛荣誉挑战次数(服务器返回)
eMessageActivity_PKSquareBeginMatch_C            = 0x173E;    // 斗仙坛开始匹配
eMessageActivity_PKSquareMatchResult_S           = 0x173F;    // 斗仙坛匹配结果
eMessageActivity_PKSquareReward_S                = 0x1740;    // 斗仙坛战斗结果
eMessageActivity_PKSquareOpponentLeave_S         = 0X1741;    // 开始战斗时对手离开

eMessageActivity_GetDChest_C 					 = 0x1742;	  // 打开福币宝库
eMessageActivity_GetDChest_S					 = 0x1743;	  // 打开福币宝库(服务器返回)
eMessageActivity_ExchangeDChest_C 				 = 0x1744;	  // 福币宝库兑换
eMessageActivity_ExchangeDChest_S 				 = 0x1745;	  // 福币宝库兑换(服务器返回)
eMessageActivity_BuyFuCoin_C					 = 0x1746;	  // 购买福币
eMessageActivity_BuyFuCoin_S 					 = 0x1747;	  // 购买福币(服务器返回)
eMessageActivity_CleanCD_C						 = 0x1748;	  // 清除cd
eMessageActivity_CleanCD_S						 = 0x1749;	  // 清除cd
eMessageActivity_GetChestRecord_C				 = 0x174A;	  // 获取玩家购买记录
eMessageActivity_GetChestRecord_S 				 = 0x174B;	  // 获取玩家购买记录(服务器返回)

eMessageActivity_OpenWestPreach_C               = 0x174C;   // 打开西行传道
eMessageActivity_OpenWestPreach_S               = 0x174D;   // 打开西行传道(服务器返回)
eMessageActivity_Preach_C                       = 0x174E;   // 出发
eMessageActivity_Preach_S                       = 0x174F;   // 出发(服务器返回)
eMessageActivity_BuyPlunder_C                   = 0x1750;   // 购买掠夺次数
eMessageActivity_BuyPlunder_S                   = 0x1751;   // 购买掠夺次数(服务器返回)
eMessageActivity_WestPreach_S                   = 0x1752;   // 西行传道(服务器通知)
eMessageActivity_CloseWestPreach_C              = 0x1753;   // 关闭西行传道
eMessageActivity_WestPreachLog_S				= 0x1754;	// 日志异步更新
}

//
// 错误码定义
//
enum eErrorCodeActivity
{
eErrorCodeActivity_Success             = 0x000000;
eErrorCodeActivity_StartOnlineFailed   = 0x170101;     // 激活在线奖励失败
eErrorCodeActivity_NotStart            = 0x170102;     // 活动暂未开启
eErrorCodeActivity_OnlineNotEnd        = 0x170103;     // 在线奖励暂未结束
eErrorCodeActivity_OnlinePriseGeted    = 0x170104;     // 在线奖励已经领取
eErrorCodeActivity_GetPrizeBagNotFull  = 0x170105;     // 背包空间不足
eErrorCodeActivity_OnlineRewardGetd    = 0x170701;     // 在线天数经历已经领取
eErrorCodeActivity_OnlineDayOver       = 0x170702;     // 在线天数过大
eErrorCodeActivity_OnlineRewardNull    = 0x170703;     // 在线天数奖励不存在
eErrorCodeActivity_SystemCannotOpen    = 0x170B01;     // 功能暂未开放
eErrorCodeActivity_LevelNotHigh        = 0x170B02;     // 等级未达到
eErrorCodeActivity_GetedLevelPrize     = 0x170B03;     // 已经领取等级奖励
eErrorCodeActivity_LevelIsNull         = 0x170B04;     // 该等级没有奖励

eErrorCodeActivity_DuelPKNotStart      = 0x170F01;     // 活动还未开始
eErrorCodeActivity_DuelPKEnd           = 0x170F02;     // 活动已经结束
eErrorCodeActivity_DuelPKRewardIsGet   = 0x170F03;     // 奖励已经领取
eErrorCodeActivity_DuelPKRewardConfig  = 0x170F04;     // 奖励配置出错
eErrorCodeActivity_DuelPkBagIsFull     = 0x170F05;     // 背包空间不足

eErrorCodeActivity_AreaIDIsNULL         = 0x171601;     // 区域id错误
eErrorCodeActivity_AreaNotHold          = 0x171801;     // 该区域暂未制霸
eErrorCodeActivity_CurAreaNotHold       = 0x171802;     // 当前区域暂未制霸
eErrorCodeActivity_72HolePrizeIsGet     = 0x171803;     // 奖励已经领取
eErrorCodeActivity_72HolePrizeConfig    = 0x171804;     // 奖励配置出错
eErrorCodeActivity_PrizeBagConfig       = 0X171805;     // 奖励包不存在

eErrorCodeActivity_72HoleNotBuy         = 0x171A01;     // 活动次数无法购买
eErrorCodeActivity_72HoleGoldFail       = 0x171A02;     // 元宝出错
eErrorCodeActivity_GoldNotEnough        = 0x171A03;     // 玩家元宝不足

eErrorCodeActivity_SysDragonActNotStart    = 0x171E00;     // 系统活动为开始
eErrorCodeActivity_RoleDragonNotStart      = 0x171E01;     // 任务未接任务
eErrorCodeActivity_DragonActNotStart       = 0x171E02;     // 活动未开始
eErrorCodeActivity_DragonIsOver            = 0x171E03;     // 活动已经结束
eErrorCodeActivity_DragonIsApply           = 0x171E04;     // 玩家已经报名
eErrorCodeActivity_DragonIsFull            = 0x171E05;     // 活动人数已满
eErrorCodeActivity_DragonInTeam            = 0x171E06;     // 组队中无法进入
eErrorCodeActivity_ApplyDragonFail         = 0x171E07;     // 报名失败
eErrorCodeActivity_DragonFightNumOver      = 0x171E08;     // 战斗次数失败
eErrorCodeActivity_DragonDaysFail          = 0x171E09;     // 日期出错
eErrorCodeActivity_DragonCopyIdFail        = 0x171E0A;     // 关卡获取出错
eErrorCodeActivity_DragonApplyOver         = 0x171E0B;     // 报名已经结束

eErrorCodeActivity_TestDailyRewardNotStart      = 0x172100;     // 活动未开始
eErrorCodeActivity_TestDailyRewardIsGet         = 0x172101;     // 奖励已经领取
eErrorCodeActivity_TestDailyRewardIsOver        = 0x172102;     // 活动已经结束

eErrorCodeActivity_VipLevelIsZero         = 0x172500;   // vip每日奖励vip为0
eErrorCodeActivity_VipLevelRewardHaveGet  = 0x172501;   // vip每日奖励已经领取
eErrorCodeActivity_VipLevelConfigErr      = 0x172502;   // vip奖励配置错误
eErrorCodeActivity_VipBagIsFull           = 0x172503;   // vip奖励背包满
eErrorCodeActivity_VipIsNotOpen         = 0x172504;   //  该功能未开放

eErrorCodeActivity_GetDragonKillCopyFail  = 0x172801;   // 获取四海龙王副本出错
eErrorCodeActivity_DragonReviveConfFail   = 0x172802;   // 获取复活配置出错
eErrorCodeActivity_DragonReviveGoldNotEntough = 0x172803; // 元宝不足
eErrorCodeActivity_DragonReviveFail       = 0x172804;   // 复活失败
eErrorCodeActivity_DragonReviveNeedVip    = 0x172805;   // vip才能复活

eErrorCodeActivity_DonotHaveMonsterGobuff = 0x172001;   // 暂无该buff
eErrorCodeActivity_MonsterGoGoldisNotEnough = 0x172002; // 元宝不足
eErrorCodeActivity_RemoveMonsterGobuffFail  = 0x172003; // 移除buff出错

eErrorCodeActivity_36IslandPrizeIsGet     = 0x172F00;     // 奖励已经领取
eErrorCodeActivity_36IslandPrizeConfig    = 0x172F01;     // 奖励配置出错
eErrorCodeActivity_36IslandNotBuy         = 0x173100;     // 活动次数无法购买
eErrorCodeActivity_36IslandGoldFail       = 0x173101;     // 元宝出错

eErrorCodeActivity_NotTotalPay            = 0x173300;     // 没有充值无法领奖
eErrorCodeActivity_GetFirstPayReward      = 0x173301;     // 已领取首充奖励
eErrorCodeActivity_FirstPayRewardIDError  = 0x173302;     // 首充奖励id出错
eErrorCodeActivity_FirstPayBagFull        = 0x173303;     // 首充奖励背包已满

eErrorCodeActivity_NotTotalPayConfigNull  = 0x173500;     // 累积充值配置出错
eErrorCodeActivity_NotAccachTotalPay      = 0x173501;     // 没有达到累积充值额度无法领取奖励
eErrorCodeActivity_GetTotalPayReward      = 0x173502;     // 已领取累积充值奖励
eErrorCodeActivity_TotalPayRewardError    = 0x173503;     // 累积充值奖励配置出错
eErrorCodeActivity_TotalPayBagFull        = 0x173504;     // 背包已满
eErrorCodeActivity_addTotalPayFail        = 0x173505;     // 添加状态出错

eErrorCodeActivity_TotalConsumeNotStart   = 0x173700;     // 累积消费未开启
eErrorCodeActivity_OpenFunBaseFail        = 0x173701;     // 功能开发配置出错
eErrorCodeActivity_ActEndCanNotGet        = 0x173702;     // 活动结束无法领取
eErrorCodeActivity_NotPreTotalConsume     = 0x173703;     // 前一天没有任何消费
eErrorCodeActivity_GetTotalConsumeReward  = 0x173704;     // 已经领取前天累积消费奖励
eErrorCodeActivity_RewardIDFail           = 0x173705;     // 累积消费配置出错
eErrorCodeActivity_TotalConsumeBagFull    = 0x173706;     // 背包已满
eErrorCodeActivity_RepoIsFull             = 0x173707;     // 丹药背包已满
eErrorCodeActivity_InvalidPills           = 0x173708;     // 非法丹药

eErrorCodeActivity_PKSquareNotGet         = 0x173A00;     // 斗仙坛暂未开启
eErrorCodeActivity_PKSquareNotStart       = 0x173A01;     // 斗仙坛活动未开始
eErrorCodeActivity_PKSquareEnd            = 0x173A02;     // 斗仙坛活动结束
eErrorCodeActivity_PKSquareTimeOut        = 0x173A03;     // 斗仙坛不在活动时间内
eErrorCodeActivity_PKSquarePlayerNot      = 0x173A04;     // 斗仙坛玩家不存在

eErrorCodeActivity_PKSquareTimesMax       = 0x173C00;     // 购买次数已达上限
eErrorCodeActivity_PKSquareTimesGoldNULL  = 0x173C01;     // 购买元宝配置出错
eErrorCodeActivity_BuyPKSquareTimesTimes  = 0x173C02;     // 元宝不足

eErrorCodeActivity_DoubleChestNotGet      = 0x174200;     // 天帝宝库活动未激活
eErrorCodeActivity_InvalidPillsChestID    = 0x174400;     // 非法的商品id
eErrorCodeActivity_ChestIDNotBuy          = 0x174401;     // 该商品暂时无法购买
eErrorCodeActivity_ChestIsBuy             = 0x174402;     // 福币商城道具已经买过
eErrorCodeActivity_ChestFCoinCostNULL     = 0x174403;     // 福币商城价格出错
eErrorCodeActivity_ActCoinIsNotEnough     = 0x174404;     // 福币不足
eErrorCodeActivity_BagIsNotEnough         = 0x174405;     // 背包空间不足
eErrorCodeActivity_CountIsError           = 0x174406;     // 参数异常

eErrorCodeActivity_GoldIsNotEnough        = 0x174600;     // 元宝不足

eErrorCodeActivity_HasRefresh             = 0x174800;     // 商城已经重刷无需清除CD
eErrorCodeActivity_DoubleChestIsOver      = 0x174801;     // 活动已结束

eErrorCodeActivity_WestPreachNotGet       = 0x174C00;   // 西行传道任务未接
eErrorCodeActivity_SysWestPreachNotGet    = 0x174C01;   // 西行传道未开启

eErrorCodeActivity_WestConfigError        = 0x174E00;   // 无效的传道id
eErrorCodeActivity_WestPreachNotStart     = 0x174E01;   // 活动未开始
eErrorCodeActivity_WestPreachEnd          = 0x174E02;   // 活动已经结束
eErrorCodeActivity_Preaching              = 0x174E04;   // 正在传道无法传道
eErrorCodeActivity_PreachNumsOver         = 0x174E05;   // 今日传道次数已经用完
eErrorCodeActivity_PreachGameCoinOver     = 0x174E06;   // 传道金币不足
eErrorCodeActivity_PreachGoldOver         = 0x174E07;   // 传道元宝不足
eErrorCodeActivity_PreachCostError        = 0x174E08;   // 传道消耗配置错误
eErrorCodeActivity_PreachFail             = 0x174E09;   // 传道失败
eErrorCodeActivity_LowVipNotPreach        = 0x174E0A;   // vip等级太低无法运高等级镖

eErrorCodeActivity_BuyCountError          = 0x175000;   // 购买参数出错
eErrorCodeActivity_BuyCountFull           = 0x175001;   // 购买次数已用完
eErrorCodeActivity_BuyGoldError           = 0x175002;   // 购买元宝配置出错
eErrorCodeActivity_BuyGoldNotEnough       = 0x175003;   // 购买元宝不足
}



message MessageActivityGetOnlineRewardRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlinereward_C];
required int32              actid       = 2;    // 活动id
}

message MessageActivityGetOnlineRewardResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlinereward_S];
required int32              time        = 2;    // 倒计时总时间 >0 倒计时时间 -1 在线奖励结束
}

message MessageActivityGetOnlineRewardInfoRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineRewardInfo_C];
required int32              actid       = 2;    // 活动id
}

message MessageActivityGetOnlineRewardInfoResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineRewardInfo_S];
required int32              time        = 2;    // 大于0倒计时剩余时间; 0 暂未开始; -1 已经领取上次奖励 -2是可以领取奖励
required int32              totaltime   = 3;    // 当前倒计时总时间
}

message MessageActivityGetOnlineDaysInfoRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineDayInfo_C];
required int32              actid       = 2;    // 活动id
}

message MessageActivityGetOnlineDaysInfoResopnse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineDayInfo_S];
repeated OnlineDayInfo      info        = 2;    // 累积在线天数
}

message MessageActivityGetOnlineDaysRewardRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineDayReward_C];
required int32              day         = 2;    // 领取天数
required int32              actid       = 3;    // 活动id
}

message MessageActivityGetOnlineDaysRewardResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineDayReward_S];
required int32              day         = 2;    // 领取天数
required bool               isget       = 3;    // 是否领取
}

message MessageActivityGetOnlineLevelUpRewardInfoRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineLevelUpRewardInfo_C];
required int32              actid       = 2;    // 活动id
}

message MessageActivityGetOnlineLevelUpRewardInfoResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineLevelUpRewardInfo_S];
repeated LevelUpInfo        info        = 2;    // 领取等级奖励信息
}

message MessageActivityGetOnlineLevelUpRewardRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineLevelUpReward_C];
required int32              level       = 2;    // 领取等级
required int32              actid       = 3;    // 活动id
}

message MessageActivityGetOnlineLevelUpRewardResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetOnlineLevelUpReward_S];
required int32              level       = 2;    // 领取等级
required bool               isget       = 3;    // 是否领取
}

message MessageActivityGetActivitysRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetActivityInfo_C];
optional int32              actid       = 2;    // 活动id
}

message MessageActivityGetActivitysResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetActivityInfo_S];
repeated ActivityUnit       info        = 2;    // 活动信息
// 在线奖励格式: 1: 当前倒计时没有结束:t:3|tt:60 t剩余时间 tt总时间
//               2：奖励未领取: p:60    p总时间
optional bool               isupdate    = 3;    // true 等于只更新一条
}

message MessageActivityGetDuelPKRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetDuelPkInfo_C];
optional int32              actid       = 2;    // 活动id
}

message MessageActivityGetDuelPKResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetDuelPkInfo_S];
optional DuelPKUnit         owner       = 2;    // 自己的活动信息
repeated DuelPKUnit         others      = 3;    // 其他的排行信息
}

message MessageActivityGetYestDuelPKRankRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetYestDuelPkRank_C];
optional int32              actid       = 2;    // 活动id
}

message MessageAcitvityGetYestDuelPKRankResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetYestDuelPkRank_S];
optional int32              rank        = 2;    // 排行
}

message MessageActivityGetDuelPKRewardRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetDuelPkReward_C];
optional int32              actid       = 2;    // 活动id
}

message MessageActivityGetDuelPKRewardResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetDuelPkReward_S];
}

message MessageActivityDuelPKResultNotify
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_DuelPKResult_S];
optional int32              count       = 2;    //  已经挑战的次数
optional int32              rate        = 3;    //  胜率
optional int32              score       = 5;    //  积分
}

message MessageActivityDuelPKMyLastRankRequest
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetYestDuelPkRank_C];
optional int32              actid       = 2;    // 活动id
}

message MessageActivityDuelPKMyLastRankResponse
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_GetYestDuelPkRank_S];
optional int32              actid       = 2;    // 活动id
optional int32              lastrank    = 3;    // 上次排名
}

message MessageActivity72HoleCopyListRequest
{
optional eMessageActivity   id              = 1     [default = eMessageActivity_Get72HoleCopyList_C];
optional int32              areaid          = 2;    // 区域id
}

message MessageActivity72HoleCopyListResponse
{
optional eMessageActivity       id              = 1     [default = eMessageActivity_Get72HoleCopyList_S];
optional int32                  areaid          = 2;    // 区域id
optional int32                  status          = 3;    // 0 未制霸 1 制霸未领取奖励 2 制霸领取奖励
optional int32                  hostingstatus   = 4;    // 扫荡状态 0 不能扫荡 1可以扫荡
optional int32                  fightcount      = 5;    // 每日已战斗次数
optional int32                  buycount        = 6;    // 每日购买次数
repeated HoleCopyProgressInfo   info            = 7;    // 关卡列表信息
}

message MessageActivity72HoleRewardRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_Get72HoleReward_C];
optional int32                  areaid      = 2;    // 区域id
}

message MessageActivity72HoleRewardResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_Get72HoleReward_S];
optional int32                  areaid      = 2;
}

message MessageActivityBuy72HoleCountRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_Buy72HoleFightCount_C];
}

message MessageActivityBuy72HoleCountResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_Buy72HoleFightCount_S];
optional int32                  count       = 2  ;  //购买次数

}

message MessageActivityDragonKillInfoRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetDragonKillInfo_C];
optional int32                  actid       = 2;
}

message MessageActivityDragonKillInfoResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetDragonKillInfo_S];
repeated DragonKillInfo         info        = 2;    // 活动信息
}

message MessageActivityJoinDragonKillRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_JoinDragonKill_C];
optional int32                  actid       = 2;    // 活动id
}

message MessageActivityJoinDragonKillResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_JoinDragonKill_S];
optional string                 starttime   = 2;    // 活动开始
}

message MessageActivityDragonKillRewardNotify
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_DragonKillReward_S];
optional int32                  type        = 2;    // 1 战斗失败奖励 2 战斗胜利双倍奖励 3最后一击额外奖励(包括2)
repeated DragonRewardUnit       reward      = 3;    // 奖励资源
optional int32                  itemid      = 4;    // 道具id
repeated DragonRewardUnit       killerreward = 5;   // 补刀者奖励
optional int32                  killeritemid = 6;   // 补刀者道具奖励
optional string                 killerid     = 7;   // 补刀人id
optional string                 killername   = 8;   // 补刀人名字
optional FuBagItem              fuitem       = 9;   // 福袋掉落奖励
}

message MessageActivityPKSquareRewardNotify
{
optional eMessageActivity       id          = 1 [ default = eMessageActivity_PKSquareReward_S];
optional int32                  type        = 2; // 1.战斗胜利 2.战斗失败
optional int32                  yuanqi      = 3; // 元气
optional int32                  exp         = 4; // 经验
optional int32                  ecoscore    = 5; // 获取匹配积分( +- 之分)
}

message MessageActivityDragonKillReviveCDNotify
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_DragonKillReviveCD_S];
optional string                 unitid      = 2;    // 玩家名字
optional int32                  revivecd    = 3;    // 复活的cd时间
}

message MessageActivityDragonKillReviveRequest
{
optional eMessageActivity       id          = 1     [default =eMessageActivity_DragonkillRevive_C];
optional int32                  count       = 2;    // 复活次数
}

message MessageActivityTestDailyRewardRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetTestDailyReward_C];
}

message MessageActivityTestDailyRewardResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetTestDailyReward_S];
}

message MessageActivityDragonKillCopyDamageNotify
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_DragonKillCopyDamage_S];
optional int32                  mydamage    = 2;    // 我的伤害
repeated DragonKillDamageUnit   info        = 3;    // 伤害前十名排行
}


message MessageActivityVipEveryDayRewardRequest
{
optional eMessageActivity       id         = 1      [default = eMessageActivity_GetVipEveryDayReward_C];
}

message MessageActivityVipEveryDayRewardResponse
{
optional eMessageActivity       id         = 1      [default = eMessageActivity_GetVipEveryDayReward_S];
}

message MessageActivityEnterMonsterGoSceneNotify
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_EnterMonsterGoScene_S];
optional int32                  cityid      = 2;    // 城镇id
repeated MonsterGoNpcUnit       npclist     = 3;    // npc列表
repeated MonsterGoBossUnit      bosslist    = 4;    // boss列表
optional int32                  credit      = 5;    // 玩家积分
}

message MessageActivityMonsterGoReviveNotify
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_MonsterGoRevive_S];
optional int32                  cityid      = 2;    // 城镇id
repeated MonsterGoNpcUnit       npclist     = 3;    // npc列表
repeated MonsterGoBossUnit      bosslist    = 4;    // boss列表
}

message MessageActivityClearMonsterGoDebuffRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_ClearMonsterGoDeBuf_C];
}

message MessageActivityClearMonsterGoDebuffResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_ClearMonsterGoDeBuf_S];
optional int32                  cd          = 2;    // cd时间
}

message MessageActivityMonsterGoCopyFightResultNotify
{
optional eMessageActivity   id          = 1     [default = eMessageActivity_MonsterGoCopyFightResult_S];
optional int32              credit      = 2;    // 积分
}

message MessageActivityIsland36CopyListRequest
{
optional eMessageActivity   id              = 1     [default = eMessageActivity_GetIsland36CopyList_C];
optional int32              areaid          = 2;    // 区域id
}

message MessageActivityIsland36CopyListResponse
{
optional eMessageActivity       id              = 1     [default = eMessageActivity_GetIsland36CopyList_S];
optional int32                  areaid          = 2;    // 区域id
optional int32                  status          = 3;    // 0 未制霸 1 制霸未领取奖励 2 制霸领取奖励
optional int32                  hostingstatus   = 4;    // 扫荡状态 0 不能扫荡 1可以扫荡
optional int32                  fightcount      = 5;    // 每日已战斗次数
optional int32                  buycount        = 6;    // 每日购买次数
repeated IslandCopyProgressInfo info            = 7;    // 关卡列表信息
}

message MessageActivityIsland36RewardRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetIsland36Reward_C];
optional int32                  areaid      = 2;    // 区域id
}

message MessageActivityIsland36RewardResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetIsland36Reward_S];
optional int32                  areaid      = 2;
}

message MessageActivityBuyIsland36CountRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_BuyIsland36FightCount_C];
}

message MessageActivityBuyIsland36CountResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_BuyIsland36FightCount_S];
optional int32                  count       = 2  ;  //购买次数
}

message MessageActivityGetFirsetPayRewardRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetFirstPayReward_C];
}

message MessageActivityGetFirsetPayRewardResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetFirstPayReward_S];
}

message MessageActivityGetTotalPayRewardRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetTotalPayReward_C];
optional int32                  index       = 2;    // 领取档次
}

message MessageActivityGetTotalPayRewardResponse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetTotalPayReward_S];
optional int32                  index       = 2;    // 领取档次
}

message MessageActivityGetTotalConsumeRewardRequest
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetTotalConsumeReward_C];
}

message MessageActivityGetTotalConsumeRewardResonse
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_GetTotalConsumeReward_S];
}

message MessageActivityActivityInfoNotify
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_ActivityInfo_S];
repeated ActivityUnit           info        = 2;    // 活动信息
// 在线奖励格式: 1: 当前倒计时没有结束:t:3|tt:60 t剩余时间 tt总时间
//               2：奖励未领取: p:60    p总时间
optional bool                   isupdate    = 3;    // true 等于只更新一条
}

message MessageActivityGetPKSquareRequest
{
optional eMessageActivity        id         = 1     [default = eMessageActivity_GetPKSquare_C];
optional int32                   type       = 2;    // 1 同步玩家 2 获取界面信息
}

message MessageActivityGetPKSquareResponse
{
optional eMessageActivity 		 id 		= 1 	[default = eMessageActivity_GetPKSquare_S];
optional PKSquareInfo            pksquare   = 2;	// 斗仙坛信息
repeated PKSquareLog 			 fightlog 	= 3; 	// 斗仙坛战斗信息
optional int32                   sendtime   = 4;    // 同步时间
}

message MessageActivityBuyPKSquareFightTimeRequset
{
optional eMessageActivity       id          = 1     [default = eMessageActivity_BuyPKSquareFightTimes_C];
}

message MessageActivityBuyPKSquareFightTimeResponse
{
optional eMessageActivity       id                  = 1     [default = eMessageActivity_BuyPKSquareFightTimes_S];
optional int32                  dailyfighttime      = 2; // 每日荣誉战斗次数
optional int32                  buycount            = 3; // 每日购买次数
}

message MessageActivityPKSquareBeginMatchRequest
{
optional eMessageActivity        id                 = 1 [default = eMessageActivity_PKSquareBeginMatch_C];
}

message MessageActivityPKSquareMatchResultResponse
{
optional  eMessageActivity         id           = 1 [default = eMessageActivity_PKSquareMatchResult_S];
optional string                    opponentid   = 2 ; // 对手ID，没有匹配到结果空
optional string                    name         = 3;  // 对手名字
optional int32                     playerlevel  = 4;  // 对手等级
optional int32                     exp          = 5;  // 对手斗仙坛经验
optional int32                     score        = 6;  // 对手积分
optional int32                     fighttims    = 7;  // 总战斗次数
optional int32                     wintimes     = 8;  // 胜利次数
optional int32                     pfid         = 9;  // 平台id
optional int32                     pfzoneid     = 10;  // 平台内区服ID
optional int32                     roleid       = 11; // 角色配置id
}

message MessageActivityPKSquareOpponentLeave
{
optional  eMessageActivity         id           = 1 [default = eMessageActivity_PKSquareOpponentLeave_S ];
}

message MessageActivityGetDChestRequest
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_GetDChest_C];
}

message MessageActivityGetDChestResponse
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_GetDChest_S];
optional int32 						fuCoin 		= 2; // 福币数量
optional int32 						cd 			= 3; // 下次刷新时间
repeated ChestItemUnit 				itemlist  	= 4; // 福币商城道具列表
}

message MessageActivityExchangeDChestRequest
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_ExchangeDChest_C];
optional int32 						chestid 	= 2; // 宝库id
}

message MessageActivityExchangeDChestResponse
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_ExchangeDChest_S];
optional int32 						chestid 	= 2; // 道具id
}

message MessageActivityBuyFuCoinRequest
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_BuyFuCoin_C];
optional int32                      count       = 2; // 购买次数
}

message MessageActivityBuyFuCoinResponse
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_BuyFuCoin_S];
optional int32 						fucoin 		= 2; // 剩余福币数量
}

message MessageActivityCleanCDRequest
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_CleanCD_C];
}

message MessageActivityCleanCDResponse
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_CleanCD_S];
optional int32 						cd 			= 2;
}

message MessageActivityGetChestRecordRequest
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_GetChestRecord_C];
}

message MessageActivityGetChestRecordResponse
{
optional eMessageActivity 			id 			= 1 [default = eMessageActivity_GetChestRecord_S];
repeated ChestRecordUnit 			list		= 2; // 记录
}

message MessageActivityOpenWestPreachRequest
{
optional eMessageActivity           id              = 1 [default = eMessageActivity_OpenWestPreach_C];
}

message MessageActivityOpenWestPreachResponse
{
optional eMessageActivity           id              	= 1 [default = eMessageActivity_OpenWestPreach_S];
optional string                     unitid          	= 2;    // 玩家id
repeated int32                      tag             	= 3;    // 活动状态 1 已结束 2 活动中 0 未开始
optional int32                      plundertimes    	= 4;    // 剩余掠夺次数
optional int32                      preachtimes     	= 5;    // 剩余出行次数
optional int32 						buyplundertimes 	= 6;	// 购买过的挑战次数
optional int32 						fightcd 			= 7; 	// 战斗cd时间
repeated WestInfo                   westlist        	= 8;    // 传道人员
repeated WestLogUnit                loglist         	= 9;    // 日志信息
}

message MessageActivityPreachRequest
{
optional eMessageActivity           id              = 1 [default = eMessageActivity_Preach_C];
optional int32                      preachid        = 2;    // 传道id
}

message MessageActivityPreachResponse
{
optional eMessageActivity           id              = 1 [default = eMessageActivity_Preach_S];
optional string                     unitid          = 2;
optional int32                      lastpreachtimes = 3; // 剩余出发次数
}

message MessageActivityWestPreachNotice
{
optional eMessageActivity           id              = 1 [default = eMessageActivity_WestPreach_S];
optional string                     unitid          = 2; // 玩家id
optional string                     rolename        = 3; // 玩家名字
optional int32                      preachid        = 4; // 目的地id
optional string                     endtime         = 5; // 结束时间
optional int32                      level           = 6; // 玩家等级
optional int32                      bp              = 7; // 战斗力
optional bool                       isfight         = 8; // 战斗状态
optional int32 						plundertimes 	= 9; // 剩余被劫持数量
}

message MessageActivityWestPreachLogNotice
{
optional eMessageActivity 			id 				= 1 [default = eMessageActivity_WestPreachLog_S];
repeated WestLogUnit 				log 			= 2; // 日志
}

message MessageActivityBuyPlunderRequest
{
optional eMessageActivity           id              = 1 [default = eMessageActivity_BuyPlunder_C];
}

message MessageActivityBuyPlunderResponse
{
optional eMessageActivity           id              = 1 [default = eMessageActivity_BuyPlunder_S];
optional int32                      plundertimes    = 2; // 掠夺次数
optional int32 						buyplundertimes = 3; // 购买次数
}

message MessageActivityCloseWestPreachRequest
{
optional eMessageActivity           id              = 1 [default = eMessageActivity_CloseWestPreach_C];
}
